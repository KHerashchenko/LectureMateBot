AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: CodeStar projectId used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''

Resources:
  BotAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-func/
      Handler: index.handler
      Runtime: python3.9
      Timeout: 60
      Layers:
        - !Ref PythonBaseLayer
      Role:
        Fn::GetAtt:
        - BotAPIFunctionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
        PostEvent:
          Type: Api
          Properties:
            Path: /
            Method: post

  BotAPIFunctionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'
      Policies:
      - PolicyName: AllowDescribeSecret
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: secretsmanager:DescribeSecret
            Resource: arn:aws:secretsmanager:eu-north-1:698534389290:secret:TelegramBotToken*

  PythonBaseLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      RetentionPolicy: Retain
      Description: Creating layer with Python requirements for AWS Lambda
      ContentUri: python-layers/
    Metadata:
      BuildMethod: python3.9

  PythonBaseLayerPermission:
    Type: "AWS::Lambda::LayerVersionPermission"
    Properties:
      Action: lambda:GetLayerVersion
      LayerVersionArn: !Ref PythonBaseLayer
      Principal: !Ref AWS::AccountId

Outputs:
  PythonBaseArn:
    Description: Layer Version ARN for python base
    Value: !Ref PythonBaseLayer
  BotAPIFunction:
    Description: "Bot API Lambda Function ARN"
    Value: !GetAtt BotAPIFunction.Arn
  BotAPIFunctionRole:
    Description: "Implicit IAM Role created for Bot API function"
    Value: !GetAtt BotAPIFunctionRole.Arn
